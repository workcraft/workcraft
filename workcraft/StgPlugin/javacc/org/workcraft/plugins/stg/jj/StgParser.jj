/**
 * JavaCC file
 */

options {
    JDK_VERSION = "1.8";
    STATIC = false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(StgParser)
package org.workcraft.plugins.stg.jj;

import org.workcraft.dom.Node;
import org.workcraft.dom.hierarchy.NamespaceHelper;
import org.workcraft.dom.hierarchy.NamespaceProvider;
import org.workcraft.dom.math.MathNode;
import org.workcraft.dom.references.HierarchyReferenceManager;
import org.workcraft.dom.references.Identifier;
import org.workcraft.dom.references.NameManager;
import org.workcraft.exceptions.FormatException;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.plugins.stg.*;
import org.workcraft.types.Pair;
import org.workcraft.types.Triple;
import org.workcraft.utils.EnumUtils;
import org.workcraft.utils.LogUtils;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class StgParser {

    private HashMap<String, Signal.Type> signals;
    private HashSet<String> dummies;
    private HashMap<String, StgPlace> places;
    private HashMap<Pair<Node, Node>, StgPlace> implicitPlaces;
    private Stg stg;

    private void init() {
        signals = new HashMap<>();
        dummies = new HashSet<>();
        stg = new Stg();
        implicitPlaces = new HashMap<>();
        places = new HashMap<>();
    }

    private Node getOrCreate(String ref) {
        Node node = places.get(ref);
        if (node == null) {
            node = stg.getNodeByReference(ref + "/0");
        }
        if (node == null) {
            if (dummies.contains(ref)) {
                node = stg.createDummyTransition(ref, null);
            } else if (signals.containsKey(ref)) {
                Pair<String, Integer> refPair = Pair.of(ref, 0);
                node = getOrCreate(refPair);
            } else {
                node = getOrCreatePlace(ref, null);
            }
        }
        return node;
    }

    private Node getOrCreate(Pair<String, Integer> refPair) {
        String ref = makeReference(refPair);
        Node node = stg.getNodeByReference(ref);
        if (node == null) {
            if (dummies.contains(refPair.getFirst())) {
                node = stg.createDummyTransition(ref, null, true);
            } else if (signals.containsKey(refPair.getFirst())) {
                Triple<String, SignalTransition.Direction, Integer> refTriple =
                    Triple.of(refPair.getFirst(), SignalTransition.Direction.TOGGLE, refPair.getSecond());

                node = getOrCreate(refTriple);
            } else {
                throw new FormatException("Undeclared transition encountered: "
                        + refPair.getFirst() + " (" + ref + "). Possibly malformed header.");
            }
        }
        return node;
    }

    private String makeReference(Pair<String, Integer> refPair) {
        String ref = refPair.getFirst();
        Integer instance = refPair.getSecond();
        return ref + "/" + ((instance == null) ? 0 : instance);
    }

    private Node getOrCreate(Triple<String, SignalTransition.Direction, Integer> refTriple) {
        String ref = makeReference(refTriple);
        Node node = stg.getNodeByReference(ref);
        if (node == null) {
            SignalTransition st = stg.createSignalTransition(ref, null, true);
            if (signals.containsKey(refTriple.getFirst())) {
                Signal.Type type = signals.get(refTriple.getFirst());
                st.setSignalType(type);
                node = st;
            } else {
                throw new FormatException("Undeclared signal encountered: "
                        + refTriple.getFirst() + " (" + ref + "). Possibly malformed header.");
            }
        }
        return node;
    }

    private String makeReference(Triple<String, SignalTransition.Direction, Integer> refTriple) {
        String ref = refTriple.getFirst();
        SignalTransition.Direction direction = refTriple.getSecond();
        Integer instance = refTriple.getThird();
        return ref + direction + "/" + ((instance == null) ? 0 : instance);
    }

    private void createArc(Node first, Node second) {
        try {
            if ((first instanceof NamedTransition) && (second instanceof NamedTransition)) {
                ImplicitPlaceConnection connection = stg.connect((NamedTransition) first, (NamedTransition) second);
                StgPlace implicitPlace = connection.getImplicitPlace();
                implicitPlaces.put(Pair.of(first, second), implicitPlace);
                implicitPlace.setImplicit(true);
            } else {
                stg.connect((MathNode) first, (MathNode) second);
            }
        } catch (InvalidConnectionException e) {
            throw new FormatException("Cannot create arc from '" + stg.getNodeReference(first)
                    + "' to '" + stg.getNodeReference(second) + "'.", e);
        }
    }

    private void addSignals(List<String> list, Signal.Type type) {
        for (String name : list) {
            if (signals.containsKey(name)) {
                Signal.Type prevType = signals.get(name);
                if (!prevType.equals(type)) {
                    throw new FormatException("The " + type + " signal '" + name
                           + "' was already listed as an " + prevType + " signal.");
                }
            } else if (dummies.contains(name)) {
                throw new FormatException("The " + type + " '" + name
                        + "' was already listed as a dummy.");
            } else {
                signals.put(name, type);
            }
        }
    }

    private void addDummies(List<String> list) {
        for (String name : list) {
            if (signals.containsKey(name)) {
                Signal.Type type = signals.get(name);
                throw new FormatException("The dummy '" + name
                        + "' was already listed as an " + type + " signal.");
            } else {
                dummies.add(name);
            }
        }
    }

    private StgPlace getOrCreatePlace(String ref, String suffix) {
        String fullRef = ref + (suffix == null ? "" : suffix);
        StgPlace node = places.get(fullRef);
        if (node == null) {
            // Create place with all the hierarchy and a temporary (internal) name
            String parentRef = NamespaceHelper.getParentReference(ref);
            String tmpRef = NamespaceHelper.getReference(parentRef, Identifier.getTemporaryName());
            node = stg.createPlace(tmpRef, null);
            places.put(fullRef, node);
            // Rename the place to a derived name in order to avoid clashes
            HierarchyReferenceManager refManager = stg.getReferenceManager();
            NamespaceProvider namespaceProvider = refManager.getNamespaceProvider(node);
            NameManager nameManager = refManager.getNameManager(namespaceProvider);
            String name = NamespaceHelper.getReferenceName(ref);
            String newName = nameManager.getDerivedName(node, name);
            stg.setName(node, newName);
        }
        return node;
    }

}
PARSER_END(StgParser)

<*>
SKIP :
{
   " "
|
   "\t"
}

<IGNORE_LINE>
TOKEN :
{
    <REST : (~["\r", "\n", "#"])*> : DEFAULT
}

<IGNORE_ALL>
TOKEN :
{
    <ANY : ~[]>
}

TOKEN :
{
    <COMMENT : "#" (~["\r", "\n"])*>
|
    <LINEBREAK : ((<COMMENT>)? ["\r", "\n"])+>
|
    <MODEL_NAME : ".model" | ".name">
|
    <INPUT_HEADER : ".inputs">
|
    <OUTPUT_HEADER : ".outputs">
|
    <INTERNAL_HEADER : ".internal">
|
    <DUMMY_HEADER : ".dummy">
|
    <SILENT_HEADER : ".silent">
|
    <GRAPH : ".graph">
|
    <MARKING : ".marking">
|
    <CAPACITY : ".capacity">
|
    <END : ".end"> : IGNORE_ALL
|
    <UNSUPPORTED_HEADER : "." <NAME>> : IGNORE_LINE
|
    <NAME : ["A"-"Z", "a"-"z", "_"] (["_", "A"-"Z", "a"-"z", "0"-"9", "."])*>
|
    <DIRECTION : ["+", "-", "~"]>
|
    <INTEGER : (["0"-"9"])+>
|
    <SPLIT_SUFFIX : "@" (<INTEGER>)+>
}

Stg parse() :
{
}
{
    {
        init();
    }
    (<LINEBREAK>)?
    (
        header() <LINEBREAK>
    )*
    graph()
    (
        footer() <LINEBREAK>
    )*
    <END> (<ANY>)*
    <EOF>
    {
        return stg;
    }
}

void header() :
{
    Token t;
    List<String> list;
}
{
    <MODEL_NAME> t = <NAME>
    {
        stg.setTitle(t.image);
    }
|
    <INPUT_HEADER> list = stringList()
    {
        addSignals(list, Signal.Type.INPUT);
    }
|
    <OUTPUT_HEADER> list = stringList()
    {
        addSignals(list, Signal.Type.OUTPUT);
    }
|
    <INTERNAL_HEADER> list = stringList()
    {
        addSignals(list, Signal.Type.INTERNAL);
    }
|
    <DUMMY_HEADER> list = stringList()
    {
        addDummies(list);
    }
|
    <SILENT_HEADER> list = stringList()
    {
        addDummies(list);
    }
|
    t = <UNSUPPORTED_HEADER> <REST>
    {
        LogUtils.logWarning("Unsupported keyword '" + t.image + "' in line " + t.beginLine + ". The whole line is ignored.");
    }
}

List<String> stringList() :
{
    Token t;
    List<String> list = new LinkedList<>();
}
{
    (
        t = <NAME>
        {
            list.add(t.image);
        }
    )*
    {
        return list;
    }
}

void footer() :
{
}
{
    <MARKING> marking()
|
    <CAPACITY> capacity()
|
    <UNSUPPORTED_HEADER> <REST>
}

void capacity() :
{
}
{
    (
        capacityEntry()
    )*
}

void capacityEntry() :
{
    StgPlace p;
    int value;
}
{
    (
        p = implicitPlaceReference()
    |
        p = explicitPlaceReference()
    )
    value = assignment()
    {
        p.setCapacity(value);
    }
}

void marking() :
{
}
{
    "{"
    (
        markingEntry()
    )*
    "}"
}

int assignment() :
{
    Token t;
}
{
    "=" t = <INTEGER>
    {
        return Integer.parseInt(t.image);
    }
}

void markingEntry() :
{
    StgPlace p;
    int value = 1;
}
{
    (
            p = implicitPlaceReference()
    |
            p = explicitPlaceReference()
    )
    (
            value = assignment()
    )?
    {
        p.setTokens(value);
    }
}

StgPlace implicitPlaceReference() :
{
    Node from;
    Node to;
}
{
    "<" from = anyTransition() "," to = anyTransition() ">"
    {
        return implicitPlaces.get(Pair.of(from, to));
    }
}

StgPlace explicitPlaceReference() :
{
    Token t;
    Token t1;
}
{
    LOOKAHEAD(<NAME> <SPLIT_SUFFIX>)
    t = <NAME> t1 = <SPLIT_SUFFIX>
    {
        return places.get(t.image + t1.image);
    }
|
    t = <NAME>
    {
        return places.get(t.image);
    }
}

void graph() :
{
}
{
    <GRAPH> <LINEBREAK>
    (
        graphLine() <LINEBREAK>
    )*
}

Triple<String, SignalTransition.Direction, Integer> signalTransition() :
{
    Token t;
    String name;
    SignalTransition.Direction direction;
    Integer instance = null;
}
{
    t = <NAME>
    {
        name = t.image;
    }
    t = <DIRECTION>
    {
        direction = EnumUtils.itemFromString(t.image, SignalTransition.Direction.class);
    }
    (
        "/" t = <INTEGER>
        {
            instance = Integer.parseInt(t.image);
        }
    )?
    {
        return Triple.of(name, direction, instance);
    }
}

Pair<String, Integer> dummyTransition() :
{
    Token t;
    String name;
    Integer instance = null;
}
{
    t = <NAME>
    {
        name = t.image;
    }
    (
        "/" t = <INTEGER>
        {
            instance = Integer.parseInt(t.image);
        }
    )?
    {
        return Pair.of(name, instance);
    }
}

Node anyTransition() :
{
    Triple<String, SignalTransition.Direction, Integer> r;
    Pair<String, Integer> r2;
    Node node;
}
{
    (
        LOOKAHEAD(signalTransition())
        r = signalTransition()
        {
            node = getOrCreate(r);
        }
    |
        r2 = dummyTransition()
        {
            node = getOrCreate(r2);
        }
    )
    {
        return node;
    }
}

Node splitPlace() :
{
    Token t1;
    Token t2;
}
{
    t1 = <NAME> t2 = <SPLIT_SUFFIX>
    {
        return getOrCreatePlace(t1.image, t2.image);
    }
}

void graphLine() :
{
    Token t;
    Node from;
    Node to;
}
{
    (
        LOOKAHEAD(<NAME> (<DIRECTION> | "/"))
        from = anyTransition()
    |
        LOOKAHEAD(<NAME> <SPLIT_SUFFIX>)
        from = splitPlace()
    |
        t = <NAME>
        {
            from = getOrCreate(t.image);
        }
    )
    (
        (
            LOOKAHEAD(<NAME> (<DIRECTION> | "/"))
            to = anyTransition()
        |
            LOOKAHEAD(<NAME> <SPLIT_SUFFIX>)
            to = splitPlace()
        |
            t = <NAME>
            {
                to = getOrCreate(t.image);
            }
        )
        {
            createArc(from, to);
        }
    )*
}
