package org.workcraft.plugins.circuit;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.workcraft.Framework;
import org.workcraft.exceptions.DeserialisationException;
import org.workcraft.exceptions.SerialisationException;
import org.workcraft.plugins.builtin.settings.EditorCommonSettings;
import org.workcraft.plugins.circuit.interop.VerilogFormat;
import org.workcraft.utils.FileUtils;
import org.workcraft.utils.PackageUtils;
import org.workcraft.workspace.WorkspaceEntry;

import java.io.File;
import java.io.IOException;
import java.net.URL;

class VerilogAssignTests {

    private static final String HEADER = "// Verilog netlist generated by Workcraft 3\n";

    private static final String INTRO =
            "module buffer (in, out);\n" +
                    "    input in;\n" +
                    "    output out;\n" +
                    "\n";

    private static final String BASIC_ASSIGN = "    assign out = in;\n";
    private static final String INTEGER_ASSIGN = "    assign #1 out = in;\n";
    private static final String FLOAT_ASSIGN = "    assign #01.234 out = in;\n";
    private static final String STRING_ASSIGN = "    assign #(DELAY1, DELAY2) out = in;\n";
    private static final String TIMESCALE = "`timescale 1ns / 1ps\n\n";
    private static final String TIMEUNIT = "    timeunit 0.1ns / 0.1ps;\n\n";

    private static final String OUTRO =
            "\n" +
            "    // signal values at the initial state:\n" +
            "    // !in !out\n" +
            "endmodule\n";

    @BeforeAll
    static void init() {
        final Framework framework = Framework.getInstance();
        framework.init();
        EditorCommonSettings.setExportHeaderStyle(EditorCommonSettings.ExportHeaderStyle.BRIEF);
    }

    @AfterAll
    static void finish() {
        // Restore the default no-delay setting
        CircuitSettings.setVerilogAssignDelay("");
    }

    @Test
    void testAssignDelaySetting() {
        CircuitSettings.setVerilogAssignDelay(null);
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("   ");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("1.a");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("(ERROR");
        Assertions.assertEquals("", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("1");
        Assertions.assertEquals("1", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay("0.1");
        Assertions.assertEquals("0.1", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay(".2");
        Assertions.assertEquals(".2", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogAssignDelay(" (delay1, delay2) ");
        Assertions.assertEquals("(delay1, delay2)", CircuitSettings.getVerilogAssignDelay());

        CircuitSettings.setVerilogTimescale("");
        Assertions.assertEquals("", CircuitSettings.getVerilogTimescale());

        CircuitSettings.setVerilogTimescale(" 1ns / 1ps ");
        Assertions.assertEquals("1ns / 1ps", CircuitSettings.getVerilogTimescale());
    }

    @Test
    void testAssignDelayExport() throws DeserialisationException, IOException, SerialisationException {
        final Framework framework = Framework.getInstance();
        final ClassLoader classLoader = ClassLoader.getSystemClassLoader();

        String workName = PackageUtils.getPackagePath(getClass(), "buffer.circuit.work");
        URL url = classLoader.getResource(workName);
        WorkspaceEntry we = framework.loadWork(url.getFile());
        File directory = FileUtils.createTempDirectory(FileUtils.getTempPrefix(workName));

        CircuitSettings.setVerilogTimescale(null);

        CircuitSettings.setVerilogAssignDelay(null);
        File vNullFile = new File(directory, "export-null.v");
        framework.exportWork(we, vNullFile, VerilogFormat.DEFAULT);
        Assertions.assertEquals(HEADER + INTRO + BASIC_ASSIGN + OUTRO, FileUtils.readAllText(vNullFile));
        Assertions.assertNotNull(framework.importWork(vNullFile));

        CircuitSettings.setVerilogAssignDelay("");
        File vEmptyFile = new File(directory, "export-empty.v");
        framework.exportWork(we, vEmptyFile, VerilogFormat.DEFAULT);
        Assertions.assertEquals(HEADER + INTRO + BASIC_ASSIGN + OUTRO, FileUtils.readAllText(vEmptyFile));
        Assertions.assertNotNull(framework.importWork(vEmptyFile));

        CircuitSettings.setVerilogAssignDelay("0");
        File vZeroFile = new File(directory, "export-zero.v");
        framework.exportWork(we, vZeroFile, VerilogFormat.DEFAULT);
        Assertions.assertEquals(HEADER + INTRO + BASIC_ASSIGN + OUTRO, FileUtils.readAllText(vZeroFile));
        Assertions.assertNotNull(framework.importWork(vZeroFile));

        CircuitSettings.setVerilogAssignDelay("1");
        File vIntegerFile = new File(directory, "export-integer.v");
        framework.exportWork(we, vIntegerFile, VerilogFormat.DEFAULT);
        Assertions.assertEquals(HEADER + INTRO + INTEGER_ASSIGN + OUTRO, FileUtils.readAllText(vIntegerFile));
        Assertions.assertNotNull(framework.importWork(vIntegerFile));

        CircuitSettings.setVerilogAssignDelay("01.234");
        File vFloatFile = new File(directory, "export-float.v");
        framework.exportWork(we, vFloatFile, VerilogFormat.DEFAULT);
        Assertions.assertEquals(HEADER + INTRO + FLOAT_ASSIGN + OUTRO, FileUtils.readAllText(vFloatFile));
        Assertions.assertNotNull(framework.importWork(vFloatFile));

        CircuitSettings.setVerilogAssignDelay("(DELAY1, DELAY2)");
        File vStringFile = new File(directory, "export-string.v");
        framework.exportWork(we, vStringFile, VerilogFormat.DEFAULT);
        Assertions.assertEquals(HEADER + INTRO + STRING_ASSIGN + OUTRO, FileUtils.readAllText(vStringFile));
        Assertions.assertNotNull(framework.importWork(vStringFile));

        CircuitSettings.setVerilogTimescale(" 1ns / 1ps ");
        CircuitSettings.setVerilogAssignDelay("1");
        File vTimescaleFile = new File(directory, "export-timescale.v");
        framework.exportWork(we, vTimescaleFile, VerilogFormat.DEFAULT);
        Assertions.assertEquals(HEADER + TIMESCALE + INTRO + INTEGER_ASSIGN + OUTRO,
                FileUtils.readAllText(vTimescaleFile));

        Assertions.assertNotNull(framework.importWork(vTimescaleFile));

        CircuitSettings.setVerilogTimescale(" 0.1ns / 0.1ps ");
        CircuitSettings.setVerilogAssignDelay("01.234");
        File vTimeunitFile = new File(directory, "export-timescale.v");
        framework.exportWork(we, vTimeunitFile, VerilogFormat.SYSTEM_VERILOG_ASSIGN_STATEMENTS);
        Assertions.assertEquals(HEADER + INTRO + TIMEUNIT + FLOAT_ASSIGN + OUTRO,
                FileUtils.readAllText(vTimeunitFile));

        Assertions.assertNotNull(framework.importWork(vTimeunitFile));
    }

    @Test
    void testAssignErrorImport() {
        final Framework framework = Framework.getInstance();
        final ClassLoader classLoader = ClassLoader.getSystemClassLoader();

        String numberErrorName = PackageUtils.getPackagePath(getClass(), "assign-delay-number-error.v");
        Assertions.assertThrows(org.workcraft.exceptions.DeserialisationException.class,
                () -> framework.importWork(classLoader.getResource(numberErrorName).getFile()));

        String stringErrorName = PackageUtils.getPackagePath(getClass(), "assign-delay-string-error.v");
        Assertions.assertThrows(org.workcraft.exceptions.DeserialisationException.class,
                () -> framework.importWork(classLoader.getResource(stringErrorName).getFile()));
    }

    @Test
    void testArbLateRandomAssignExport() throws DeserialisationException {
        String workName = PackageUtils.getPackagePath(getClass(), "arb-late.circuit.work");
        String svRandomisedName = PackageUtils.getPackagePath(getClass(), "arb-late-randomised.circuit.sv");
        String svPredefinedName = PackageUtils.getPackagePath(getClass(), "arb-late-predefined.circuit.sv");
        testAssignExport(workName, svRandomisedName, svPredefinedName);
    }

    @Test
    void testArbEarlyRandomAssignExport() throws DeserialisationException {
        String workName = PackageUtils.getPackagePath(getClass(), "arb-early.circuit.work");
        String svRandomisedName = PackageUtils.getPackagePath(getClass(), "arb-early-randomised.circuit.sv");
        String svPredefinedName = PackageUtils.getPackagePath(getClass(), "arb-early-predefined.circuit.sv");
        testAssignExport(workName, svRandomisedName, svPredefinedName);
    }

    private void testAssignExport(String workName, String svRandomisedName, String svPredefinedName) throws DeserialisationException {
        final Framework framework = Framework.getInstance();
        final ClassLoader classLoader = ClassLoader.getSystemClassLoader();

        URL weUrl = classLoader.getResource(workName);
        WorkspaceEntry we = framework.loadWork(weUrl.getFile());

        URL svRandomisedUrl = classLoader.getResource(svRandomisedName);
        File svRandomisedFile = new File(svRandomisedUrl.getFile());

        URL svPredefiendUrl = classLoader.getResource(svPredefinedName);
        File svPredefinedFile = new File(svPredefiendUrl.getFile());

        try {
            File tmpRandomisedFile = File.createTempFile("workcraft-", ".sv");
            tmpRandomisedFile.deleteOnExit();
            CircuitSettings.setWaitUndefinedInterpretation(CircuitSettings.WaitUndefinedInterpretation.RANDOM);
            CircuitSettings.setMutexArbitrationWinner(CircuitSettings.MutexArbitrationWinner.RANDOM);
            framework.exportWork(we, tmpRandomisedFile, VerilogFormat.SYSTEM_VERILOG_ASSIGN_STATEMENTS);
            Assertions.assertEquals(FileUtils.readAllText(svRandomisedFile), FileUtils.readAllText(tmpRandomisedFile));

            File tmpPredefinedFile = File.createTempFile("workcraft-", ".sv");
            tmpPredefinedFile.deleteOnExit();
            CircuitSettings.setWaitUndefinedInterpretation(CircuitSettings.WaitUndefinedInterpretation.HIGH);
            CircuitSettings.setMutexArbitrationWinner(CircuitSettings.MutexArbitrationWinner.FIRST);
            framework.exportWork(we, tmpPredefinedFile, VerilogFormat.SYSTEM_VERILOG_ASSIGN_STATEMENTS);
            Assertions.assertEquals(FileUtils.readAllText(svPredefinedFile), FileUtils.readAllText(tmpPredefinedFile));
        } catch (IOException | SerialisationException e) {
            throw new RuntimeException(e);
        }
    }

}
