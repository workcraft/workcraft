pluginManagement {
    plugins {
        // Plugin for JavaCC parser generator (https://plugins.gradle.org/plugin/org.javacc.javacc)
        id 'org.javacc.javacc' version '3.0.2'
        // Plugin for sending Jacoco coverage reports to coveralls.io (https://plugins.gradle.org/plugin/com.github.kt3k.coveralls)
        id 'com.github.kt3k.coveralls' version '2.12.2'
        // Plugin for PMD-based Copy-Paste Detection (https://plugins.gradle.org/plugin/de.aaschmid.cpd) - v3.4 fails in WSL
        id 'de.aaschmid.cpd' version '3.3'
        // Plugin for analysing licenses of dependencies (https://plugins.gradle.org/plugin/com.github.jk1.dependency-license-report)
        id 'com.github.jk1.dependency-license-report' version '2.9'
    }
}


/*
 * Versions of languages and tools
 */

// Java version for source code and target bytecode compatibility
gradle.ext.javaSourceVersion = JavaVersion.VERSION_17
gradle.ext.javaTargetVersion = JavaVersion.VERSION_17
gradle.ext.javaReleaseVersion = 17  /* Must be integer, e.g. 11 for JDK11*/

// Checkstyle code linter (https://checkstyle.sourceforge.io/) 
gradle.ext.checkstyleVersion = '10.18.2'
// PMD code analyser (https://pmd.github.io/) - v7.x.x requires update of rules
gradle.ext.pmdVersion = '6.55.0'
// Jacoco code coverage (https://www.eclemma.org/jacoco/)
gradle.ext.jacocoVersion = '0.8.12'


/*
 * Compile-time dependencies for all subprojects
 */

// Unit testing (https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter)
gradle.ext.junit = 'org.junit.jupiter:junit-jupiter:5.11.3'
gradle.ext.junitPlatformLauncher = 'org.junit.platform:junit-platform-launcher'

// JavaCC parser generator (https://mvnrepository.com/artifact/net.java.dev.javacc/javacc)
gradle.ext.javacc = 'net.java.dev.javacc:javacc:7.0.13'
gradle.ext.javaccExclude = '**/jj/**'


/*
 * Root project and subprojects
 */

// Root project
rootProject.name = 'workcraft'
gradle.ext.libDir = 'lib'

// Include subprojects, set their directories, and define coverage
gradle.ext.coverageProjects = []
rootDir.eachDirMatch(~/workcraft.*/) {
    file(it).eachDir {
        if (file(it.path + '/build.gradle').exists()) {
            def project1 = findProject(':' + it.name)
            if (project1 != null) {
                throw new GradleException('Project ' + it.name + ' already exists!\n' +
                    'Old path: ' + it + '\n' +
                    'New path: ' + project1.projectDir)
            }
            include it.name
            project(":" + it.name).projectDir = it
            if (file(it.path + '/test-src/').exists()) {
                gradle.coverageProjects.add(it.name)
            }
        }
    }
}
